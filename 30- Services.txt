Services

Les services Kubernetes permettent la communication entre différents composants
aussi bien à l'intérieur qu'à l'extérieur de l'application. Ils permettent de
connecter les applications avec d'autres applications ou utilisateurs.
Ils favorisent également le couplage faible entre microservices d'une application

# Services type
- NodePort:     service qui écoute les requêtes sur un port du noeud Kubernetes
                et les forwarde aux pods
- ClusterIP:    service qui crée une adresse IP virtuelle à l'intérieur du cluster
                pour permettre la communication entre différents services tels qu'un
                groupe de serveurs frontend vers un groupe de serveurs backend.
                Ce type de service permet de grouper les pods pour fournir une
                seule interface pour accéder aux pods
- LoadBalancer: service qui provisionne un load balancer pour l'application via
                les providers cloud supportés

# Définition d'un service NodePort (c'est selector qui permet de binder avec les bons pods)
apiVersion: v1
kind: Service
metadata:
  name: my-app-service
spec:
  type: NodePort
  selector:
    app: myapp
    type: front-end
  ports:
    - port: 80
      # By default and for convenience, the `targetPort` is set to
      # the same value as the `port` field.
      targetPort: 80
      # Optional field
      # By default and for convenience, the Kubernetes control plane
      # will allocate a port from a range (default: 30000-32767)
      nodePort: 30008

# Définition d'un service ClusterIP (type par défaut. C'est selector qui permet de binder avec les bons pods)
apiVersion: v1
kind: Service
metadata:
  name: back-end
spec:
  type: ClusterIP
  ports:
  - targetPort: 80
    port: 80
  selector:
    app: myapp
    type: back-end

# Creation d'un service
kubectl create -f service-definition.yaml

# Liste des services
kubectl get services
