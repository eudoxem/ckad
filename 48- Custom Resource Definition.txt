Custom Resource Definition

En Kubernetes, une Custom Resource Definition (CRD) est un moyen d'√©tendre les
fonctionnalit√©s de Kubernetes en ajoutant vos propres types de ressources,
au-del√† des ressources standard comme Pod, Service, ou Deployment.

üìò Qu'est-ce qu'une CRD ?
Une CRD permet de d√©finir un nouveau type d'objet Kubernetes. Une fois la CRD
enregistr√©e, vous pouvez cr√©er des ressources personnalis√©es (Custom Resources - CR)
comme vous le feriez avec les objets natifs.

üõ† Exemple simple de CRD
Voici un exemple de CRD qui d√©finit un type de ressource MyApp :

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: myapps.example.com
spec:
  group: example.com
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                version:
                  type: string
                replicas:
                  type: integer
  scope: Namespaced
  names:
    plural: myapps
    singular: myapp
    kind: MyApp
    shortNames:
      - ma
Une fois cette CRD appliqu√©e (kubectl apply -f crd.yaml), vous pouvez cr√©er des
ressources MyApp comme suit :

apiVersion: example.com/v1
kind: MyApp
metadata:
  name: my-app-instance
spec:
  version: "1.0"
  replicas: 3

üéØ Utilit√© des CRD
Permettent de cr√©er des op√©rateurs Kubernetes.
Offrent une API d√©clarative pour des outils ou services sp√©cifiques.
√âtendent Kubernetes sans modifier le code source du noyau.

üîç √Ä retenir
√âl√©ment	        R√¥le
group	          Le groupe API (example.com)
versions	      Liste des versions support√©es pour ce type
names.kind	    Le nom du type d'objet (MyApp)
scope	          Namespaced ou Cluster (selon si l‚Äôobjet est li√© √† un namespace)
schema	        D√©crit la structure du spec (validation via OpenAPI v3)
